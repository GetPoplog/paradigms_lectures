      ------------------------------------------------------------------
      |            Balanced  h=2           |      Unbalanced h = 5     |
      |------------------------------------+---------------------------|
      |                 7                  |         3                 |
      |                 |                  |         |                 |
      |      -----------------------       |      -------              |
      |      |                     |       |      |     7              |
      |      3                     9       |      1   -----            |
      |   --------              -------    |          5   8            |
      |   |      |              |     |    |            -----          |
      |   1      5              8     11   |            |   |          |
      |                                    |                9          |
      |                                    |              ------       |
      |                                    |              |    |       |
      |                                    |                   11      |
      |----------------------------------------------------------------|
      |                  Balanced and Unbalanced Trees                 |
      ------------------------------------------------------------------



                        ------------------------------- 
                        |              x              | 
                        |              |              |
                        |   -----------------------   |
                        |   |                     |   |
                        |   A                     B   |
                        -------------------------------

 

                     -------------------------------------
                     |                  6                |
                     |                  |                |
                     |       -----------------------     |
                     |       |                     |     |
                     |       3                     9     |
                     |    --------              -------  |
                     |    |      |              |     |  |
                     |    1                     8     11 |
                     -------------------------------------






                  ------------------------------------------
                  |                 6                      |
                  |                 |                      |
                  |      -----------------------           |
                  |      |                     |           |
                  |      3                     9           |
                  |   --------              -------        |
                  |   |      |              |     |        |
                  |   1                     8     11       |
                  |                      -------           |
                  |                      |     |           |
                  |                      7                 |
                  ------------------------------------------

                    --------------------------------------
                    |                  7                 |
                    |                  |                 |
                    |       -----------------------      |
                    |       |                     |      |
                    |       3                     9      |
                    |    --------              -------   |
                    |    |      |              |     |   |
                    |    1      6              8     11  |
                    --------------------------------------




              ---------------------------------------------------
              |                                                 |
              |       |        adjoin ==>                |      |
              |       x                                  x      |
              |    --------                           -------   |
              |    |      |                           |     |   |
              |    A      B                           A     B'  |
              |                                                 |
              |      Tree T                            Tree T'  |
              ---------------------------------------------------





                         ----------------------------
                         |           |              |
                         |           x h            |
                         |        --------          |
                         |        |      y h-1      |
                         |   h-3  A   -------       |
                         |            |     |       |
                         |            C     D       |
                         ----------------------------


                             ---------------------
                             |        |          |
                             |   h-1  y          |
                             |     --------      |
                             |h-2  x      |      |
                             |  -------   |      |
                             |  |     |   D h-2  |
                             |  A     C          |
                             |h-3    h'          |
                             |                   |
                             ---------------------



----------------------------------------------------------------------------
|                                                                          |
|            |                                     |                       |
|            x h                                   z h-1                   |
|       --------------         ==>        --------------------             |
|       |            y h-1                x h-2              y <=h-2       |
|   h-3 A        ---------            ---------         -----------        |
|            h-2 z       | h"'     h-3|       |h'       |h"       | h"'    |
|             -------    D            A       E         F         D        |
|           h'|     |h"                                                    |
|             E     F                                                      |
----------------------------------------------------------------------------




----------------------------------------------------------------------------
|                                                                          |
|        |                                     |                           |
|        x               right rotate          x                           |
|   --------------         ==>        --------------------                 |
|   |            y                    |                  z                 |
|   A        ---------                A             -----------            |
|            z       |                              |         y            |
|         -------    D                              E      --------        |
|         |     |                                          |      |        |
|         E     F                                          F      D        |
|                                                                          |
|                                                                          |
|                                                                          |
|                    left rotate               |                           |
|                                              z                           |
|                          ==>        --------------------                 |
|                                     x                  y                 |
|                                 ---------         -----------            |
|                                 |       |         |         |            |
|                                 A       E         F         D            |
|                                                                          |
----------------------------------------------------------------------------



(define class_tree (record-class 'tree
        '(full full full full)))

(define cons_tree   (car class_tree))
(define sel_tree    (caddr class_tree))
(define entry       (car sel_tree))
(define tree_left   (cadr sel_tree))
(define tree_right   (caddr sel_tree))
(define height_field (cadddr sel_tree))


    ----------------------------------------------------------
    | Alternatively, we could represent trees using lists:   |
    |                                                        |
    |   (define cons_tree list)                              |
    |   (define entry car)                                   |
    |   (define tree_left cadr)                              |
    |   (define tree_right caddr)                            |
    |   (define height_field cadddr)                         |
    ----------------------------------------------------------




(define (mk_tree entry left right)
    (cons_tree entry left right
        (+ 1 (max (height left)
            (height right)))))

(define (balance T)
    (let* (
         (L (tree_left T))
         (R (tree_right T))
         (diff (- (height R) (height L)))
         )
        diff
        )
    )



(define (make_tree x L R)
    (let* (
         (T (mk_tree x L R))
         (B (balance T))
         )
        (cond
            ( (> B 1)              ; right too deep
             (if (> (balance R) 0)
                 (rotate_left T)   ; CASE 1
                 (rotate_left      ; CASE 3
                     (mk_tree x L
                        (rotate_right R))
                     )
                 )

             )
            ( (< B -1)            ; left  too deep
             (if (< (balance L) 0)
                 (rotate_right T)     ; CASE 2
                 (rotate_right        ; CASE 4
                     (mk_tree x (rotate_left L) R))
                 )
             )
            (else T)            ; balance adequate
            );end cond
        ); end let
    )





      ----------------------------
      |           |              |
      |           x h            |
      |        --------          |
      |        |      y h-1      |
      |   h-3  A   -------       |
      |            |     |       |
      |            C     D       |
      ----------------------------



          ---------------------
          |           |       |
          |           y       |
          |        --------   |
          |        x      |   |
          |     -------   |   |
          |     |     |   D   |
          |     A     C       |
          ---------------------


(define (rotate_left T)
    (let (
         (x (entry T))
         (y (entry (tree_right T)))
         (A (tree_left T))
         (C (tree_left (tree_right T)))
         (D (tree_right (tree_right T)))
         ) (mk_tree y (mk_tree x A C) D)
        )
    )

(define (rotate_right T)
    (let (
         (y (entry T))
         (x (entry (tree_left T)))
         (A (tree_left (tree_left T)))
         (C (tree_right (tree_left T)))
         (D (tree_right T))
         ) (mk_tree x A (mk_tree y C D))
        )
    )



(define (help_stol s acc)
    (if (null_set? s)  acc
        (help_stol
            (tree_left s)
            (cons
                (entry s)
                (help_stol
                    (tree_right s)
                    acc)
                )
            )
        )   ; end if
    )



(define (set->list s)
    (help_stol s '())
    )




(define (member_set? x s)
    (cond
        ((null_set? s) #f)
        ((= x (entry s)) #t)
        ((&lt; x (entry s))
         (member_set? x
             (tree_left s)))
        (else (member_set? x
                (tree_right s)))
        )
    )



(define (adjoin x s)
    (cond
        ((null_set? s)
         (make_tree x '() '())
         )

        ((< x (entry s))
         (make_tree
             (entry s)
             (adjoin x (tree_left s))
             (tree_right s)
             )
         )

        ((> x (entry s))
         (make_tree
             (entry s)
             (tree_left s)
             (adjoin x (tree_right s))
             )
         )
        (else s)
        )
    )



(define (list->set l)
    (if (null? l) empty-set
        (adjoin (car l) (list->set (cdr l)))
        )
    )


(define (reduce f acc base l)
   (if (null? l)
       base
       (acc (f (car l)) (reduce f acc base (cdr l)))))


(define (intersect s1 s2)
    (reduce
        (lambda (x) x)                   ;f
        (lambda (x s)                    ;acc
            (if (member_set? x s2)
                (adjoin x s)
                s)
            )
        empty-set                        ;base
        (set->list s1)                   ;list
        )
    )


(define (included_in? s1 s2)
    (reduce
        (lambda (x) (member_set? x s2))    ;f
        andf                               ;acc
        #t                                 ;base
        (set->list s1))                    ;list
    )

(define (andf b1 b2)
    (and b1 b2)
    )

(define (equal_set? s1 s2)
    (and (included_in? s1 s2) (included_in? s2 s1))
    )

(test_laws_sets  100)




    -----------------------------------------------------------------
    |           |  Unordered list  |  Ordered List  |  Binary Tree  |
    |-----------+------------------+----------------+---------------|
    |member_set?|    O(n)          |   O(n)         |   O(log n)    |
    |adjoin     |    O(n)          |   O(n)         |   O(log n)    |
    |equal_set? |    O(n^2)        |   O(n)         |   O(n log n)  |
    |intersect  |    O(n^2)        |   O(n)         |   O(n log n)  |
    |union      |    O(n^2)        |   O(n)         |   O(n log n)  |
    -----------------------------------------------------------------



(define (even x)
    (= (remainder x 2) 0)
    )

(define (member_set? x s) (s x))

(define (member_set? x s) (s x))


(:- (member_set? 2 even))



Russell's  Paradox,   due  to   Bertrand
Russell, shows that allowing a set to be
defined   just   by   a   predicate   is
problematic. The main difficulty is that
it allows  one  to have  sets  that  are
members of themselves. For example,  one
might speak of the  set of all  abstract
concepts, which  is surely  an  abstract
concept and so  is a  member of  itself.
Now let us call a set <em>normal</em> if
it is not a member of itself. Is the set
of all normal sets  a normal set? If  it
is, then it is  not a member of  itself,
but, being  a normal  set it  must  be a
member of itself, a contradiction.
 

We can try out  this paradox in  Scheme!
We can define  a <em>normal</em> set  to
be one which is not a member of itelf.


(define (normal x)
    (not (member_set? x x)))



Now consider  whether  the  set  of  all
normal sets is normal. If you paste  the
line below into a file test.scm


    (normal normal) </pre>

and execute it you will get


    Error:    rle:    RECURSION    LIMIT



Incidentally, this  raises the  question
of the soundness of the  lambda-calculus
itself, since the lambda calculus allows
us to write  dangerous looking  formulae
like (x x). Is the calculus a  formalism
that  can   be  given   any   consistent
interpretation?  -  Scott  and  Strachey
showed  that   it   can  be,   but   the
construction is not easy.






A  language  is   an  infinite  set   of
sequences  of  tokens   drawn  from   an
alphabet. A parser for a language is  in
effect  a   helper  function   for   the
member_set? function. It is easy to  see
how  we  can  implement  the  union  and
intersection of languages represented by
their parsers.


However the  problem of  performing  the
equal_set? computation for languages  is
much   harder.   Indeed,   for   general
languages, it is undecidable.


