

(define (memoise f)
    (let ((table '()))                                      ; [1]
        (lambda (x)                                         ; [2]
            (let ((pair (assoc x table)))                   ; [3]
                (if pair (cdr pair)                         ; [4]
                    (let ((result (f x)))                   ; [5]
                        (set! table                         ; [6]
                           (cons (cons x result) table))
                        result) ; end let                   ; [7]
                    ) ; end if
                )  ; end let
            ) ; end lambda
        ) ; end let
    ) ; end define





(define (fib n)
    (if (< n 2)
        n
        (+ (fib (- n 1)) (fib (- n 2)))
        )
    )





    (fib 5)
    ==> (+ (fib 4) (fib 3))
    ==> (+ (+ (fib 3) (fib 2))  (+ (fib 2) (fib 1)))
    ==> (+ (+ (+ (fib 2) (fib 1)) (+ (fib 1) (fib 0)))
                           (+ (+ (fib 1) (fib 0)) 1))

    ==> (+ (+ (+ (+ (fib 1) (fib 0)) 1) (+ 1 0))
                           (+ (+ 1 0) 1))

    ==> (+ (+ (+ (+ 1 0) 1) (+ 1 0))
                           (+ (+ 1 0) 1))

    ==> 5


(define (memoise f)
    (let ((table '()))
        (lambda x
            (let ((pair (assoc x table)))
                (if pair (cdr pair)
                    (let ((result (apply f x)))
                        (set! table (cons (cons x result) table))
                        result) ; end let
                    ) ; end if
                )  ; end let
            ) ; end lambda
        ) ; end let
    ) ; end define




        -----------
--------|P|   |   |----------------------
        -----------                     |
            |                           |
            |                           |
            |                           |
            | -----------   ----------- ->-----------   ------
            ->|P| 1 |  -+-->|P| 2 |  -+-->|P| 3 |  -+-->|N|()|
              -----------   -----------   -----------   ------






(define front-ptr car)
(define rear-ptr cdr)
(define set-front-ptr! set-car!)
(define set-rear-ptr!  set-cdr!)

We can now define our higher-level abstractions:

(define (empty_queue? Q)
    (null? (front-ptr Q)))

(define (make_queue)
    (cons '() '() ))


(define (front Q)
    (if (empty_queue? Q)
        (error "front called with empty queue")
        (car (front-ptr Q))))

(example '(empty_queue? (make_queue)) #t)


 

        -----------
--------|P|   |   |----------------------
        -----------                     |
            |                           |
            |                           |
            |                           |
            | -----------   ----------- ->-----------   ------
            ->|P| 1 |  -+-->|P| 2 |  -+-->|P| 3 |  -+-->|N|()|
              -----------   -----------   ----------- ->------
                                                      -----------
                                                        -----------
                                                        |P| 4 |   |
                                                        -----------



        -----------
--------|P|   |   |----------------------
        -----------                     |
            |                           |
            |                           |
            |                           |
            | -----------   ----------- ->-----------   ------
            ->|P| 1 |  -+-->|P| 2 |  -+-->|P| 3 |  -+-  |N|()|
              -----------   -----------   -----------|->------
                                                     |-----------
                                                     |  -----------
                                                     -->|P| 4 |   |
                                                        -----------


    -----------
----|P|   |   |-----------------------------------
    -----------                                  |
        |                                        |
        |                                        |
        |                                        |
        | -----------   -----------   ------------->-----------   ------
        ->|P| 1 |  -+-->|P| 2 |  -+-->|P| 3 |  -+-->|P| 4 |  -+-->|N|()|
          -----------   -----------   -----------   -----------   ------





In the case of the empty queue:
    -----------
----|P|   |   |-
    ------------->------
        --------->|N|()|
                  ------
we make the new pair as before:
    -----------
----|P|   |   |-
    ------------->------
        --------->|N|()|
                ->------
                -----------
                  -----------
                  |P| 4 |   |
                  -----------



    -----------
----|P|   |   |-
    ------------->------
        |         |N|()|
        |       ->------
        |       -----------
        |         -----------
        --------->|P| 4 |   |
                  -----------

Finally (3) we make the rear pointer of the queue also point to the new pair
    -----------
----|P|   |   |-
    -----------|
        |      |
        |      |
        |      |
        |      -->-----------    ------
        --------->|P| 4 |  -+--->|N|()|
                  -----------    ------






(define (insert_queue! Q item)
    (let ((pair (cons item '())))          ; (1) Make pair to hold new item
        (cond
            ((empty_queue? Q)
             (set-front-ptr! Q pair)          ; (2)
             (set-rear-ptr! Q pair)           ; (3)
             Q)
            (else
                (set-cdr! (rear-ptr Q) pair)  ;  (4)
                (set-rear-ptr! Q pair)        ;  (5)
                Q)
            )
        )
    )


 

(define (make_queue_list list)
    (let ((Q (make_queue)))
        (for-each (lambda (x) (insert_queue! Q x)) list)
        Q
        )
    )

(example '(make_queue_list '(1 2 3)) '((1 2 3) 3))
